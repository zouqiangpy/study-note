函数式编程概述:
  在数学中,函数就是有输入量.输出量的一套计算方案,也就是"拿什么东西做什么事情".相对而言.面向对象过分强调"必须通过对象的形式来做事情",而函数式思想则尽量忽略面向对象的复杂语法--强调做什么,而不是以什么形式做.

lambda表达式(1.8以后的新特性)

应用一:代替匿名内部类,极简写法构造接口对象,重写其方法

  一.格式:(需要传递的参数名称) -> {需要执行的代码}
        
        说明:这个参数就是接口中要重写方法的参数.如果有参数的时候可以不加括号,省略括号.
             代码就是接口中要重写方法中要执行的内容.

  二.什么时候用?
     最常用:当需要传某一个接口对象作为参数时,用lambda表达式.
             (需要传递的参数名称)->接口重写方法中执行的内容.:
  

  三.使用前提:
     1.一定是在我们使用抽象方法的时候代替接口.
     2.lambda表达式所代表的接口只可以是有且只有一个抽象方法的接口.


例1:new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println("我执行了");
            }
        }).start();
   用lambda表达式则为:
    new Thread(()->System.out.println("我执行了")).start();

例2:
   //定义接口
   public interface Student {
    void study(String name);
   }
   //定义方法
   private static void use(Student s) {
        s.study("王亮");
   }
   //lambda表达式调用方法
   use(s-> System.out.println("我是一名学生,我的名字是"+s));    //注意单独的s并不是一个对象,传入的全部才是,只不过该接口抽象方法中有参                                                                  数,此时可以省略括号.
   //新方法
   use(System.out::println);                                    //如果仅仅要对传入的参数进行输出,可以用该方法.固定写法.



编程的进步:
  实现一个接口的重写方法.
     最原始:1.创建子类.2实现该接口,重写方法,3.实例化子类对象 4.调用方法
     进步:匿名内部类
     先进:lambda表达式.
  这三种方法其实最终目的只是为了使用某个接口中的抽象方法


应用二:循环遍历集合(不能遍历数组)
   例:
   List<Integer> list=new ArrayList<>();
        Collections.addAll(list,1,2,3,4,5);
        //方式一:
        list.forEach(a->{
            System.out.println(a);
        });
        //方式二:
        list.ForEacn(System.out::println);          //再次说明,该方式仅可用于这种情况:仅对传入的参数直接进行输出
   }                                                                                  是该情况的简写.


         
