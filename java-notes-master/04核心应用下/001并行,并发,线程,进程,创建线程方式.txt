一.并行与并发
  并行:指两个或多个时间在同一时刻,同一时间点(某一微秒,某一毫秒)发生(同时发生)
  并发:指两个或多个事件在同一时间段内(连续十几毫秒)发生.(并发可以认为快速的切换程序)
  
  注意:单核CPU不存在并行,是并发.可以同时打开多个应用程序,其实是程序的切换.

二.进程与线程

  进程:当一个程序进入内存,就是进程.
       一个内存中运行的应用程序,每一个进程都有一个独立的内存空间,一个应用程序至少有一个进程(可以有多个),
       进程也是程序运行的一次过程,是程序运行的基本单位,系统运行一个程序,即是进程从创建,运行到消亡的过程.
       (各个进程并发运行表示 各个进程轮流获得CPU的使用权,在可运行池中,会有多个进程处于就绪状态,等待CPU)
        

  线程:进程内部的独立执行单元.
       一个进程可以同时并发的运行多个线程.
        (可以理解为一个进程是一个单CPU操作系统,而线程就是系统中运行的多个任务)
       线程本身是具有随机性的

  区别:进程有自己的独立内存空间(堆空间和栈空间都是独立的)
   
       线程堆空间是共享的,栈空间是独立的.

三.
java程序有一个进程,就是JVM,至少有两个线程.
  第一个线程:main方法主线程.
  第二个线程:垃圾回收线程

单线程程序:从上往下依次执行的.

四.创建线程的方式
  方式一:
  1.继承Thread类.
  2.重写run方法(run方法里面就是线程需要执行的任务)
  3.创建对象并且调用start方法开启线程.(调用start方法就开始执行run方法里面的内容)
 
  注意:此方式创建线程,已开启的线程不能重复开启.(一个类要再开启线程,重new一个对象即可)
    
  方式二:
  1.实现Runnale接口(线程目标接口,线程任务接口).
  2.重写run方法.
  3,创建目标对象(自己写的类的对象),创建Thread类对象,并把目标对象引用作为Thread类构造参数传递.
  4.Thread类对象引用调用start()方法开启线程.
  (这种方式没有getName()方法,通过currentThread()方法调用名称)
   例:
   Thread04 thread04 = new Thread04();
   Thread thread = new Thread(thread04,"实现类名称");
   thread.start();
   理解:Thread类对象开启线程,运行它的类中的run方法,它的run方法中就会调用thread04.run().即执行自定义类中run()方法的内容.

   

区别:方式一.1.线程对象和线程任务是一体的,创建类本身是线程对象
            2.不适合共享资源(同一个动作资源),每开启一个线程就需要new一个对象
           
     方拾二.1.线程任务和线程对象是分开的.分工明确,更符合高内聚,低耦合的开发原则.
            2.适合共享资源.开启多线程用的同一个任务对象.

重点:用的时候这两种方式该如何选择?
     创建多个线程动作一致,就实现Runnable接口
     动作不一致,继承Thread类.

使用Runnable的好处:
     1.适合资源共享.
     2.避免单继承的局限性(如果继承了Thread类,就不能继承其他类,实现更多的业务逻辑).
     3.程序健壮性更好,任务代码和线程是分离的,实现了解耦操作,一个任务对象可以被多个线程共享.
     4.可以放在线程池中(线程池中只能放实现Runnable接口和实现Callable接口的类,不能放继承Thread类的类)

五.创建线程匿名内部类(和方式二原理一样)
   例:
    public static void main(String[] args) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println(Thread.currentThread().getName()+" :"+123);
            }
        },"新线程").start();
    }

