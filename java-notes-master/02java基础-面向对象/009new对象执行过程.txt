    public class Play {
	private String s;
	Play(){
		s="Constract";
		System.out.println("我执行构造器了");
		
	}
	
	public String toString() {
		System.out.println("我执行toString了");
		return s;
	}
    }
    public class Play2 {
	public static void main(String[] args) {
		Play play=new Play();
		System.out.println(play);
	}
    }

执行结果:
   我执行构造器了
   我执行toString了
   Constract

分析:1.当new一个对象时,会先执行构造器里的内容.
     2.当用输出语句直接调用输出对象是,其实就是调用的toString方法


注意:new 某一个对象的总执行过程是:(初始化过程)
    1.类初始化(初始化属于类的内容,静态内容)
     (1).初始化父类的静态变量和静态代码块,按出现顺序执行(刚开始加载类时就加载)
     (2).初始化子类的静态变量和静态代码块,按出现顺序执行(刚开始加载类是就加载)
    2.实例初始化
     (3).先初始化父类的普通成员变量.非静态代码块,再执行父类构造方法.
     (4).初始化子类的普通成员变量.非静态代码块.再执行子类构造方法.
    
    
   
     注意:静态代码不管new多少个对象,都只在类第一次被加载的时候执行一次.
          而非静态代码块和构造函数每新建一个对象就执行一次.
    
     非静态代码块:
        基本和构造函数一个功能,但比构造函数先执行,最常见的用法还是代码复用,即多个构造函数有相同的代码,就把这些重复的代码提出来放到初始     化块中,但要注意执行顺序.对顺序有严格要求的就不适用了.

原理:jvm执行时会把普通成员变量和代码块中需要执行的语句都放到构造器里.放的语句的顺序是放在原有构造器语句中的前面.
      如果有多个构造器,每个构造器里都会放一份.
