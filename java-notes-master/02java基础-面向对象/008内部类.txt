
在描述事物时,一个事物里面还有其他事物,就可以用内部类这种结构,比如一个Car,里面有Engine,
  public class Car{ //外部类
      class Engine{  //内部类(内部类一般来说不希望被直接访问,不写修饰符,默认default修饰.)
      }
  }
访问特点:
  1.内部类可以直接访问外部类成员,包括私有成员

  2.其他类要直接访问内部类成员,必须建立内部类的对象.通过对象访问.
    建立格式:
    外部类名.内部类名 变量名= new 外部类名().new 内部类名();
    外部类名.内部类名 变量名= 父类引用.new 内部类名();

  3.外部类访问内部类成员,也要建立对象
    内部类名 变量名=new 内部类名();
    然后通过对象访问
注意事项:
   1,内部类仍然是一个独立的类,编译时内部类会被编译成独立的class文件,外部会被冠以外部类名称和$符号
     比如:Car&Engine.class


匿名内部类:
   当使用接口时,通常有以下几步:
   1.创建接口   2.创建子类    3.实现方法    4.new 对象,调用
   为了简化这一步,所以有了匿名内部类

   格式:   父类名或接口名 变量=new 父类名或接口名(){                   解释:1.=右边(包括大括号里面)是匿名内部类,定义并创建该接口子类象
               public void method(){ //重写父类中的抽象方法                 =左边是多态赋值,接口引用类型指向子类对象
               }                                                          
           };       //注意分号                                             2.通常把变量作为一个方法参数传进去,当然也可以直接把等号右边                                                                             的传进去,不赋给变量也行
           变量.方法;(实现方法的调用)

   前提:匿名内部类必须实现方法的重写,new的是父类类型

注意:
   1.匿名内部类中的方法必须是接口或父类中定义的 

优点:可以快速实现或重写某一类或某个接口的方法
缺点:不可以增加自己的特有功能        
   