一.虚拟机详解.
   分类:
      系统虚拟机和程序虚拟机.
   1.系统虚拟机.
     完全是对物理计算机的仿真,提供了一个可运行完整操作系统的软件平台,利用Visual Box,VMare模仿的linux操作系统.
   2.程序虚拟机.
     专门为执行单个程序而设计,典型代表就是java虚拟机.在java虚拟机中执行的指令我们称为java字节码指令.
   注意:无论是系统虚拟机换是程序虚拟机,在上面执行的软件都限制于虚拟机提供的资源中.

二.JVM内存模型.
   1.JVM虚拟机数据区.
     线程私有:
        a.程序计数器.
          就是一个指针,指在当前线程正在执行的字节码的行号.(debug时使用)
         b.java虚拟机栈.
            一个栈结构,为java方法调用时使用,每一个线程对应一个java虚拟机栈,其声明周期与线程共进退,每个java方法在调用时都会创建一个               栈祯,并入栈,一旦调用完成,则出栈.所有的栈祯都出栈之后,线程也就完成了使命.
        c.本地方法栈.
          一个栈结构,区别是为虚拟机使用本地(native)方法所使用.
     线程共享:
        e.堆.
          堆是JVM内存占用最大,管理最复杂的一个区域.其唯一的用途就是存放对象实例:所有的对象实例及数组都在堆上进行分配
          声明:1.7以后,字符串常量池从永久带中剥离出来,存放在堆中.堆有自己的内存分块划分,按照GC分带收集角度的划分.
  2.本地内存.(线程共享)
     a.元数据区.(方法区)
     b.直接内存.

三.java1.8和1.7的区别.
     这里介绍的是JDK1.8JVM运行时数据区域划分.1.8和1.7相比,最大的区别就是:元数据区取代了永久带.元数据区和永久带本质上相同,都是对JVM规   范中方法区的实现,其区别是元数据区是使用在本地内存的,而永久带是存储在JVM内存中的.
     声明:字符串常量区是放在堆中的.
  

四.java堆详解.
   1.默认堆分配如下:
      a.老年代:三分之二的堆空间.
      b.年轻代:三分之一的堆空间.
   2.年轻代区域划分如下:
      a.eden区:8/10的年轻代空间.(伊甸园,亚当和夏娃开始的地方)
      b.survivor0:1/10的年轻代空间.
      c.survivor1:1/10的年轻代空间.      



     
    