虚拟机参数:栈
  java栈里面最重要的就是线程了,一般程序发生循环,死锁,线程Hang住等问题,我们都需要从栈上去分析原因.

一.重要参数
   1.查看某个进程中所有的栈的信息(可以找到具体java中对应的行数)
     jstack pid
     a.通常这些信息很多,一般会放在一个文件中
       jstack pid>001.txt(一个任意的文件名)
     b.查看文件
       linax系统下载文件:sz 001.txt:下载该文件.
       window:直接文件名称即可查看.(默认保存在当前路径,jdk/bin下的路径)

   2.查看JVM某个进程中的所有线程.
     top -p pid(对于linux系统而言)
  
   3.设置栈的初始空间大小.(当前线程所使用的java虚拟机栈)
     -Xss1m(就是设置栈的初始大小为1m)
  

二.常见的栈异常.
    1.StackOverFlow:
      出现原因,程序中递归调用过深.

    2.CPU持续上升.飙升.
      可能原因:
         程序中某些调用不正常,比如在一个web端程序中,有一个无限循环的while循环,当从页面上访问这个程序时,就是造成cpu持续上升.
      查看步骤(linux环境下):
        a.jps -l:找到当前java中自己的应用程序的进程id
        b.top -P pid -H:查看该进程中哪个线程使用的cpu高.
        c.找到线程对应的pid之后,它是十进制的,需要转成十六进制的nid.怎么转? 
          print "%x" pid
        d.jps -l---->jstack pid>文件名:就是找到当前java中自己的应用程序的所有进程的信息.通常会导出一个文件
        e.在文件中找自己刚刚匹配的nid的对应线程,就可以找到出问题的代码的行号.

    3.出现死锁问题.
      出现原因:
          比如两个对象相互持有对方的锁,又想执行下去,就会出现死锁.
      查看步骤:
          a.jps -l---->jstack pid>文件名:还是找到这个进程对应的线程信息,放到文件中.
          b.在文件中搜索deadlock即可.
          
      

