一.虚拟机参数说明:
   因为跟踪系统的运行状态对于系统的故障排除有一定的帮助.为此,虚拟机提供了一些跟踪系统状态的一些参数,使用给定的的参数执行java虚拟机,就可以在系统运行时打印相关日志,用于分析实际问题.我们进行虚拟机参数配置,其实主要就是围绕着堆栈,进行配置.

二.Heap内存相关参数.
   1.-XX:+PrintGC:虚拟机启动后,只要遇到GC就会打印日志(+代表执行后边的命令,不写或者-号代表不执行)
   2.-XX:+UserSerialGC:使用串行回收器(垃圾收集器的一种)
   3.-XX:+PrintGCDetails:打印GC的详细信息,包括各个区的情况.
   4.-Xms:设置java程序启动时初始堆的大小(重要)
   5.-Xmx:设置java程序能获得的最大堆的大小.(重要)
   6.-XX:+PrintCommandLineFlags:将配置的信息打印到控制台.

   注意:在实际工作中,我们可以直接将初始的堆大小和最大堆大小设置相等,这样的好处是可以减少程序运行时的垃圾回收次数,从而提高性能.
        其实也是相当于一个锁内存的概念,就是我先把所有的配置内存都占了,不至于在我还没有用的时候被其他应用程序霸占了.

三.GC执行大概原理.
   1.新生代--复制算法.
     举例:新new的对象都被放在eden区,当一个方法调用完之后(里面有4个局部变量的对象,总共有10个对象),经过一次GC之后,这10个对象会被放入s0中           然后把非局部的,常引用的6个对象再放在s1中,s0中的对象会被整体clear.所以s0和s1每次只能用一个.
   2.老年代--标记压缩法.
     举例:有些对象在经历了15次GC之后,仍然存在,这些对象会被放入到老年代中,老年代中的数据很多.(老年代的GC会影响性能)
           当老年代需要GC时,会把需要回收的对象标记起来,不需要回收的对象统一放在老年代的一端,其他的被全部clear.
          


四.如果想配置JVM的内存的话.		
      //Xms5m -Xmx20m -XX:+PrintGCDetails -XX:+UserSerialGC -XX:+PrintCommandLinaFlags
      eclipse:可以将这一句run as Configration.然后运行程序.
      idea:工具栏的Configration

