程序的耦合:
     耦合:程序之间的依赖.
          包括:类之间的依赖以及方法之间的依赖.
     解耦:降低程序之间的依赖.
          编译期不强依赖,运行才去依赖.
    
     思路:
         1.使用反射来创建对象,避免使用new关键字来创建.
         2.通过配置文件来获取要创建的对象的全限定类名.


依赖举例:
   连接一个数据库常用操作:
  //1.注册驱动: 
  //DriverManager,register(new com.mysql.jdbc.Driver);                //这个就是强依赖.
  class.forName("com.mysql.jdbc.Driver");                            //这个就是降低耦合.这样的好处是即使删除mysql的驱动包,依然可以编译
  //2.获取连接对象.
  Connection connection=DriverManader.getConnection("jdbc:mysql://127.0.0.1:3306/ssm","root","root");
  //3.获取语句对象
  PrepareStatement preparestatement=connection.prepareStatement("select * from user");
  //4.执行sql语句.
  ResultSet resultset=prepareStatement.executerQuery();
  //5.遍历结果集.
  while(result.next()){
     System.out.println(result.getString("username"));
  }
  //6.释放资源.
  resultset.close();
  prepareStatement.close();
  connection.close();


二.使用工厂模式解耦应用程序.
    理解:1.在实际开发中我们可以把三层的对都使用配置文件配置起来,当启动服务器加载的时候,让一个类中的方法通过读取配置文件,把这些对象创建           出来并保存起来,在接下来使用的时候,直接拿过来用就好了.
         2.这个读取配置文件,创建和获取三层对象的类就是工厂.

    说明:工厂:创建bean对象. 
         bean:可重用组件(在一个项目中,一个包,一个类都可被认为是组件)
   
    步骤:1.通过读取配置文件来配置所需要的类.
         2.通过读取配置文件中配置内容,通过反射来创建对象.

    例:
    public class BeanFactory {
    private static Properties properties=null;
    static{
        InputStream inputStream = BeanFactory.class.getClassLoader().getResourceAsStream("beans.properties");
        properties= new Properties();
        try {
            properties.load(inputStream);
        } catch (Exception e) {
            throw new RuntimeException("初始化配置文件失败");
        }
    }

    public static Object getBean(String className){
        String AllName = properties.getProperty(className);
        Object obj=null;
        try {
            obj = Class.forName(AllName).newInstance();
        } catch (Exception e) {
            e.printStackTrace();
        } 
        return obj;
    }

      这样其实还会有问题,因为每次调用这个方法都会创建对应的对象,这是我们不想看到的,解决的办法是初始化时就获取所有的对象然后存起来,用     的时候直接用即可.
   例:
    private static Properties properties=null;
    private static Map<String,Object> map;
    static{
        InputStream inputStream = BeanFactory.class.getClassLoader().getResourceAsStream("beans.properties");
        properties= new Properties();
        try {
            properties.load(inputStream);
            //实例化容器
            map=new HashMap<String, Object>();
            //获取该容器中所有的key.
            Enumeration<Object> keys = properties.keys();
            //遍历所有的key.
            while(keys.hasMoreElements()){
                //拿到单个key
                String className  = keys.nextElement().toString();
                //拿到对应的全路径
                String AllClassName = properties.getProperty(className);
                //为每个类获取一个实例
                Object ins = Class.forName(AllClassName).newInstance();            //这个newInstance是调用默认的构造函数
                //将类名和对应的实例传进去
                map.put(className,ins);
            }
        } catch (Exception e) {
            throw new RuntimeException("初始化配置文件失败");
        }
    }

    public static Object getBean(String className){
       return map.get(className);
    }
   
   

















  
         