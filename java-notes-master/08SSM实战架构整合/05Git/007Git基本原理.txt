
一.git常用命令.
   1.echo 'hello'>text.txt,新创建text.txt文件并写入hello.
   2.find [文件名] -type f: 显示这个文件下的所有的文件夹和文件.
   3.git  cat-file -p [版本id] :显示 校验和(那个id) 中对应的内容.
  



一.首先看一下git的结构.
   1.config:当前库的配置信息.
   2.description:描述信息.
   3.HEAD:指针.
   4.hook:钩子,提供自动化提交操作.
   5.info:信息
   6.object:
       每次提交生成的id就放在这里,id总共40位,前两位是一个文件夹的名称,后面是里面的文件的名称.
   7.ref:
       heads
       tag:对每次提交做一个标记

三.Git基本原理.
   1.加密算法(哈希):就是将提交的改变信息生成一个加密文件的过程.
     特点:
        a.不管输入数据有多大,同一个哈希算法,得到的加密结果的长度是固定的.
        b.哈希算法确定,输入数据确定,输出数据能够保证不变.
        c.哈希算法确定,输入数据有变化,输出的数据一定有变化.
        d.不可逆. 
   2.底层SHA-1算法:
       就是文件的检验,每一个文件生成唯一的一个id,这个id就是加密文件的名称
       如果这个文件内容有一点改动,则生成id就会变化
   3.校验和(版本id)中的内容.
       tree b0739a0d4ff07ce11d15ec008086e0236759dc69
       author bling <1290468479@qq.com> 1564918696 +0800
       committer bling <1290468479@qq.com> 1564918696 +0800



四.Git基本对象类型.
   1.commits对象:
      包含:
         tree b0739a0d4ff07ce11d15ec008086e0236759dc69       //包含tree对象
         author bling <1290468479@qq.com> 1564918696 +0800
         committer bling <1290468479@qq.com> 1564918696 +0800
   2.trees对象:
      包含:
         100644 blob ce013625030ba8dba906f756967f9e9ca394464a    text.txt  //包含blob对象
   3.blob对象:
      包含:
         你上传的真正的文本信息.
   4.tags对象:
      对每次你上传的版本做一个标记.      

五.Git文件管理.
   1.集中式版本控制工具的文件管理机制.
     以文件变更列表的方式存储信息,就是以增量备份的方式存储信息.每次会存储变化的东西,
   2.Git文件管理机制.
       Git把数据看作是小型文件系统的一组快照,每次提交git都会对当前的全部文件制作一个快照并保存快照的索引,为了高效,如果文件没有修改,Git不再重新存储该文件,而是只是保留     一个链接指向之前存储文件.

六.快照和增量备份.
   1.了解.
     增量备份会保存每次更新的数据.
     而快照会锁定物理单元内容，并记录本次快照和上一次快照的所对应的物理地址（或者是上一层逻辑地址）的差异。
   2.那么快照是怎么使数据可以恢复呢?
     
        逻辑地址  0   1   2   3
        物理地址  0 1 2 3 4 5 6 7
        存储数据  A B C D
     
     在我们查找数据的时候,通过逻辑地址,找到对应的物理地址,通过物理地址就可以找到真正的数据.
     那么现在我们要使用快照将ABCD改为AACD,怎么改? 
      
        逻辑地址      1   2   3   0
        快照地址  0   1
        物理地址  1 2 3 4 5 6 7 8 9
        存储地址  A B C D       A A
 
     这样我们通过逻辑地址查询时,数据变为AACD.但如果使用快照地址查询时,还可以找到原来的数据ABCD.所以快照并不真正存储数据,而是存储地址.
   
     
     自己理解就是快照会锁定原有物理地址和对应的数据,而改变逻辑地址和物理地址的对应关系.这样通过快照就可以找到原有的数据,而通过逻辑地址就可以找到改动后的数据.


七.Git分支管理.
   1.分支创建其实就是创建一个分支,指向某一次的commit.
   2.分支切换,切换指针HEAD即可.

 
补充:物理地址=逻辑地址*16+偏移量.
     
      
 
   


