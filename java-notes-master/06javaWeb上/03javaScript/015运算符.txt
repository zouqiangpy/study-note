一.一元运算符:只有一个运算数参与运算.
   ++,--,+(正号),-(负号)
   说明:++和--和java一样.
        正负号在js中,如果要求运算的类型不是数值类型,js引擎会自动将其转换为数值类型. 
          a.string转number类型,按照字面值转,如果字面值是数字,转为对应的数字,否则转为NaN.
             举例:g=+"123"  输出g就是number类型 123.  
                  g=+"a"    输出g就是number类型 NaN.  
          b.boolean转number类型,true转为1,false转为0.
             举例:g=+true;  输出number类型,1
                  g=+false; 输出number类型,0
          c.null转number类型,转成0.
             举例:g=+null;  输出number类型,0
          d.undefined转number类型,转成NaN.
             举例:g=+undefined;  输出number类型,NaN

二.算数运算符.
  +,-,*,/,%
  和java一样

三.赋值运算符.
   =,+=,-=
   和Java一样.

四.比较运算符.
   <,>,=,>=,<=,===(全等于)
   比较方式:1.如果类型相同,则直接按照字典顺序,按位进行顺序比较.直到比较出大小为止.
              例:"abc"=="abc","abd">"abc"
            2.如果类型不同,则先转化类型,再进行比较.(在java中不同类型的是不能比较的)
              例:"123"==123.   如果转换类型的字面值不是数字,则进行比较运算时都是false   例:"a">1 返回fasle.
            3.===(全等于)
              比较时先进行类型比较,如果类型不一致,则直接返回false,一致则再进行数值比较.
              例:"123"===123  返回false.

五.逻辑运算符.
   &&,|| !
     &&,||和java规则一样.也有短路现象(如果前面已经确定了运算结果,就不再计算后面了)
     
     !在JS里面也涉及到类型转换:
        a.number类型转boolean:0和NaN是false,其他都是true.
        b.string类型转boolean:空值""是false,其他都是true.
        c.null和undefined:这两个都是false.
        d.Object:所有的对象都是true.

六.三目运算符.
   表达式?值1:值2;
   和java一样.


